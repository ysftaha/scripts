#!/usr/bin/python3
# vim: tw=0
from termcolor import colored
from subprocess import call
import sys
import os

# NOTE See $HOME/.zsh_aliases.re
# NOTE arg[1] is extension
# NOTE arg[2] is %:p:h is path
# NOTE arg[3] is % is full file name
# NOTE arg[4] is %:p:h:h ../ path

# Suppress errors
sys.stderr = object

pth = sys.argv[2]
fpth = sys.argv[3]
ppth = sys.argv[4]
fname = fpth.split(".")[0].split("/")[-1]

termid = "/tmp/termid.dat"
with open(termid) as wid:
    lines = wid.read()
wid = int(lines)

prefix=f" xdotool type --window {wid} "
suffix=f" && xdotool key --window {wid} Enter "

hsh = {
    "sh": f"xdotool type --window {wid} 'cd {pth} && sh {fpth} /home/u/git/scripts/alias/usage' {suffix}"
    ,

    "lex": f"cd {pth} && jlex {fname}.lex"
    ,

    "java": f"cd {pth} && javac {fpth} -d ../build "
    + f"&& cd ../build && java {fname} "
    + ""
    ,

    "c": f"xdotool key --window {wid} ctrl+c && xdotool type --window {wid} 'python3 -m http.server -d build-sim' {suffix}"
    ,

    "h": f"xdotool key --window {wid} ctrl+c && xdotool type --window {wid} 'emmake make && python3 -m http.server -d build-sim' {suffix}"
    ,

    "cpp": f"cd {pth} && clang++ -g -std=c++17 {fpth} -Wall " 
    + f"&& ./a.out "
    + ""
    ,

    "go": f"xdotool type --window {wid} 'go build timer.go && ./timer -t test -e \"alarm 20\" 5m' && xdotool key --window {wid} Enter" # use go build {fpth} for an executable
    ,

    "py": f"{prefix} 'cd {pth} && python {fpth}|copy' {suffix}",

    "hs": f"cd {pth} && ghc -dynamic {fpth} -outputdir /tmp -o out"
    + f"&& ./out "
    + ""
    ,

    "awk": f"cd {pth} && awk -f {fpth} "
    + "~/2021-Prayer-Times-Windsor.txt"
    ,

    "bash": f"cd {pth} && bash {fpth} "
    + "-b test.html"
    ,

    "tex": f"cd {pth} && xelatex -jobname=out -output-directory=/tmp {fpth}"
    + ""
    ,

    "asm": f"cd {pth} && cd .. && ./run.sh {fname}"
}

try:
    # print(f"{hsh[sys.argv[1]]}\n")
    # call("sleep 1", shell=True)
    call(f"{hsh[sys.argv[1]]}", shell=True)
except(KeyError):
    plat = sys.platform
    supported_platform = plat != 'Pocket PC' and (plat != 'win32' or
                                                  'ANSICON' in os.environ)
    is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()
    if(is_a_tty):
        print('{} {} {} {} extension is not configured'
              .format(colored('[', 'white', attrs=['bold']),
                      colored('Err', 'red', attrs=['bold']),
                      colored(']', 'white', attrs=['bold']),
                      colored(sys.argv[1], 'yellow', attrs=['bold'])))
    else:
        print(f"[Err] {sys.argv[1]} extension not configured")
